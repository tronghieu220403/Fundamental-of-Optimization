s: student
t: teacher
c: council

cs:
+) Once:
i from 0 to nStu:
	sum(cs[b,i] for b in range(nCouncil)) == 1

+) Number of project in a council >= minPrj and <= maxPrj:
b from 0 to nCouncil:
	maxPrj >= sum(cs[b,i] for i in range(nStu)) >= minPrj

ct:
+) Once (mỗi giáo viên chỉ xuất hiện 1 lần):
t from 0 to nPrf:
	sum(ct[b,t] for b in range(nCouncil)) == 1

+) Number of teacher in a council >= minPrf and <= maxPrf:
b from 0 to nCouncil:
	maxPrj >= sum(ct[b,t] for t in range(nPrf)) >= minPrj

st:
+) Set:
i from 0 to nStdu:
	t from 0 to nPrf:
		if PrfData[t][i] < minMatchPrf:
			st[i,t] = 0


+) Number of teacher that a student can meet in his council >= minProf and <= maxProf:
for i in range(nStu):
    solver.Add(sum(st[i][t] for t in range(nProf)) >= minProf)
    solver.Add(sum(st[i][t] for t in range(nProf)) <= maxProf)

+) In all council, all teacher can not meet the student that he take respond for
for i in range(len(Guide)):
    w(f"{i}_{Guide[i]}")
    solver.Add(st[i][Guide[i]] == 0)
    PrfData[Guide[i]][i]  = -999999

ss:
+) Set:
i from 0 to nStu:
	j from 0 to nStu:
		if PrjData[i][j] < minMatchPrj:
			ss[i,j] = ss[j,i] = 0

cst:
+) Link:
b from 0 to nCouncil:
	i from 0 to nStu:
		t from 0 to nPrf:
			cst[b,i,t] *3 <= cs[b,i] + ct[b,t] + st[i,t]
+) Once
+) Least, Most

css:
+) Link:
i from 0 to nStu:
	j from 0 to nStu:
		b from 0 to nCouncil:
			css[b,i,j] * 3 <= cs[b,i] + cs[b,j] + ss[i,j]
			( css[b,i,j] can only = 1 when all cs[b,i] and cs[b,j] and ss[i,j] = 1)
+) Once
+) Symmetric
+) Least, Most
maximize: sum(css[b,i,j]) + sum(cst[b,i,t])

-> thuật toán chạy chính xác, kết quả tối đa, thời gian chạy lâu.

Cải tiến thời gian chạy bằng cách thêm các constraints để kết quả trả ra luôn thỏa mãn điều kiện đề bài (nhưng không phải là 
tối ưu) -> Đây chính là heuristics (lấy kết quả trả đầu tiên làm đáp án bài toán)

cst:
+) All linked
Các cặp b,i,t không thể chung 1 council nếu như st[i1,t2] == 0.
Tránh trường hợp giáo viên t được chọn vào hội đồng A nhưng lại không thể kết nối được với một(vài) học sinh trong
hội đồng đó -> All linked chính là để loại bỏ trường hợp này, đảm bảo tất cả giáo viên nào được chọn vào hội đồng A
đều có thể kết nối với tất cả học sinh trong hội đồng đó.

css:
+) All linked (make a clique)

Tránh trường hợp học sinh i được chọn vào hội đồng A nhưng lại không thể kết nối được với một(vài) học sinh trong
hội đồng đó -> All linked chính là để loại bỏ trường hợp này, đảm bảo tất cả học sinh nào được chọn vào hội đồng A
đều có thể kết nối với tất cả học sinh còn lại trong hội đồng đó.