s: student
t: teacher
c: council

cs: cs[b,i] = 1 means that student i in council b
+) Once: Each student appear EXACTLY 1 time
i from 0 to nStu:
	sum(cs[b,i] for b in range(nCouncil)) == 1

+) Number of project in a council >= minStu and <= maxStu:
b from 0 to nCouncil:
	maxStu >= sum(cs[b,i] for i in range(nStu)) >= minStu

ct: ct[b,t] = 1 means that teacher t in council b
+) Once (Each teacher appear EXACTLY 1 time):
t from 0 to nProf:
	sum(ct[b,t] for b in range(nCouncil)) == 1

+) Number of teacher in a council >= minProf and <= maxPrf:
b from 0 to nCouncil:
	maxStu >= sum(ct[b,t] for t in range(nProf)) >= minStu

st: st[i,t] = 1 means that teacher t and student i is in the same council (They are paired)
+) Set:
i from 0 to nStdu:
	t from 0 to nProf:
		if PrfData[t][i] < minMatchPrf:
			st[i,t] = 0

+) Number of teacher that a student can meet in his council >= minProf and <= maxProf:
for i in range(nStu):
    maxProf >= sum(st[i][t] for t in range(nProf)) >= minProf

+) In all council, all teacher can not meet the student that he take respond for
for t in Guide:
    st[i,t-1] == 0
+) Number of teacher that a student can meet in his council >= minProf and <= maxProf:
i from 0 to nStu:
        maxProf >= sum(st[i,t] for t from 0 to nProf) >= minProf
+) Number of student that a teacher can meet in his council >= minProf and <= maxProf:
t from 0 to nProf:
        maxStu >= sum(st[i,t] for t from 0 to nProf) >= minStu


ss: ss[i,j] = 1 means that student i and student j is in the same council (They are paired)
+) Set:
i from 0 to nStu:
	ss[i,i] = 0
	j from 0 to nStu:
		if PrjData[i][j] < minMatchPrj:
			ss[i,j] = ss[j,i] = 0

+) Symmetric:
i from 0 to nStu:
     j from i+1 to nStu:
        ss[i][j] = ss[j][i]

+) The number of students that a student can connect int a council is >= minStu-1 and <= maxStu-1 (-1 for himself)
i from 0 to nStu:
         maxStu-1 > = sum(ss[i][j] for j in range(nStu)) >= minStu-1


Link cs and ss:
We can see that project vs project in the same council will create a completed graph
https://theses.hal.science/tel-01707043/document
page 15 in The Maximum Vertex Weight Clique Problem (MVWCP). 
According to that, we came to this conclusion:
+) Both student i and j can be in the same council only if they are paired(i.e ss[i,j] = 1)
b from 0 to nCouncil:
	i from 0 to nStu:
		j from 0 to nStu:
			cs[b,i] + cs[b,j] <= ss[i,j] + 1

Link cs and ct and st:
We can see that project vs teacher in the same council will create a two-sides graph
+) Both teacher t and student i can be in the same council only if they are paired(i.e st[i,t] = 1)
b from 0 to nCouncil:
	i from 0 to nStu:
		t from 0 to nProf:
			cs[b,i] + ct[b,t] <= st[i,t] + 1

To have the heuristic solution, skip this.
To have the correct solution, we have 2 methods.
Method 1: Easier to understand, but slower in time complexity
cst: cst[b,i,t] = 1 means both that student i and teacher t are in council b
+) Link:
b from 0 to nCouncil:
	i from 0 to nStu:
		t from 0 to nProf:
			cst[b,i,t] *3 <= cs[b,i] + ct[b,t] + st[i,t]

cst[b,i,t] can only be TRUE when all below conditions are TRUE:
+) cs[b,i] = 1: Student i is in council b
+) ct[b,t] = 1: Teacher t is in council b
+) st[i,t] = 1: Student i and teacher t are in the same council (They are paired)

css: css[b,i,j] = 1 means that both student i and student j are in council b
+) Link:
b from 0 to nCouncil:
	i from 0 to nStu:
		j from 0 to nStu:
			css[b,i,j] * 3 <= cs[b,i] + cs[b,j] + ss[i,j]
css[b,i,j] can only be TRUE when all below conditions are TRUE:
+) cs[b,i] = 1: Student i is in council b
+) cs[b,j] = 1: Student j is in council b
+) ss[i,j] = 1: Student i and student j are in the same council (They are paired)

maximize: sum(css[b,i,j] * PrjData[i][j]) + sum(cst[b,i,t] * PrfData[t][i])

Method 2: faster

maximize: sum(ss[i,j] * PrjData[i][j]) + sum(st[i,t] * PrfData[t][i])

Qua 2 method, ta thấy:
-> thuật toán chạy chính xác, kết quả tối đa, thời gian chạy lâu (1 cái nhanh hơn cái còn lại nhưng vẫn lâu)

Heuristic:
Cải tiến thời gian chạy bằng cách chỉ tìm kiếm kết quả trả ra thỏa mãn điều kiện đề bài (nhưng chưa chắc đã 
tối ưu kết quả) -> Lấy kết quả trả đầu tiên làm đáp án bài toán -> Heuristics

